@page "/"
@using Microsoft.EntityFrameworkCore
@using global::OJBlazor.Share.DataModels
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<OJContext> DbFactory


<PageTitle>@(IsAuthenticated ? $"{User.Name} : 个人中心" : "主页")</PageTitle>

@if (IsAuthenticated)
{
    <h2>欢迎! @User.Name</h2>
    <Divider/>
    <Row ItemsPerRow="ItemsPerRow.Four" ColSpan="4">
        @foreach (var item in MyLearn)
        {
            <a href="@($"Course/{item.HashName}")">
                <ContextMenuZone>
                    <ContextMenuTrigger>
                        <Card IsCenter="true" IsShadow="true" class="item">
                            <BodyTemplate>
                                <h6>@item.Name</h6>
                                <p>@item.Intro</p>
                            </BodyTemplate>
                        </Card>
                    </ContextMenuTrigger>
                </ContextMenuZone>
            </a>
        }
    </Row>
    <Divider/>
    <Row ItemsPerRow="ItemsPerRow.Four" ColSpan="4">
        @foreach (var item in Total)
        {
            <a href="@($"Course/{item.HashName}")">
                <ContextMenuZone>
                    <ContextMenuTrigger>
                        <Card IsCenter="true" IsShadow="true" class="item">
                            <BodyTemplate>
                                <h6>@item.Name</h6>
                                <p>@item.Intro</p>
                            </BodyTemplate>
                        </Card>
                    </ContextMenuTrigger>
                </ContextMenuZone>
            </a>
        }
    </Row>
}
else
{
    <h1>WebFile</h1>
    <p>WebFile是一个云文件管理储存系统，您只要注册、登录账号即可</p>
    <p>WebFile可以让用户在云端存储、管理、分享、下载各种类型的文件，如文档、图片、音乐、视频等</p>
    <p>具有高速、安全、稳定、易用的特点，用户可以随时随地访问自己的文件，无需担心文件丢失或损坏</p>
    <p>WebFile还支持多平台、多设备的同步，方便用户在不同的场景下使用WebFile</p>
}

@code
{

    private bool IsAuthenticated { get; set; }
    private UserModel User { get; set; } = new();
    private List<CourseModel> MyLearn { get; set; } = new();
    private List<CourseModel> Total { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var claims = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var user = claims.ToUser();

        if (user == null)
            return;
        IsAuthenticated = true;

        await using var context = await DbFactory.CreateDbContextAsync();

        var u = await context.UserModels.FirstOrDefaultAsync(x => x.Id == user.Id && x.Name == user.Id);
        User = u ?? user;
        Total = await context.CourseModels.ToListAsync();
        var l = User.LearnCourses.Split(";");
        foreach (var s in l)
        {
            var c = await context.CourseModels.FirstOrDefaultAsync(x => x.HashName == s);
            if (c != null) MyLearn.Add(c);
        }
    }
}