@page "/CourseManage/{Text?}"
@using Microsoft.EntityFrameworkCore
@using global::OJBlazor.Share.DataModels
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<OJContext> DbFactory
@inject NavigationManager navigation
@inject MessageService MessageService
@inject DialogService DialogService

@if (string.IsNullOrEmpty(Text))
{
    <Row ItemsPerRow="ItemsPerRow.Three" ColSpan="4">
        <Button Color="Color.None" IsAsync="true" OnClick="@(() => CourseModelDialog(null))">
            <Card IsCenter="true" IsShadow="true" class="item">
                <BodyTemplate>
                    <i class="fa-solid fa-plus 4x content"></i>
                </BodyTemplate>
            </Card>
        </Button>

        @foreach (var item in CourseModels)
        {
            <Button Color="Color.None" IsAsync="true" OnClick="@(() => CourseModelDialog(item))">
                <ContextMenuZone>
                    <ContextMenuTrigger>
                        <Card IsCenter="true" IsShadow="true" class="item">
                            <BodyTemplate>
                                <h6>@item.Name</h6>
                                <p>@((MarkupString)item.Intro)</p>
                            </BodyTemplate>
                        </Card>
                    </ContextMenuTrigger>
                    <ContextMenu>
                        <ContextMenuItem Icon="fa-solid fa-trash" Text="删除" OnClick="@(async (_, _) => await Remove(item))"/>
                        <ContextMenuItem Icon="fa-solid fa-pen-to-square" Text="编辑子内容" OnClick="@((_, _) => EditChildren(item))"/>
                    </ContextMenu>
                </ContextMenuZone>
            </Button>
        }
    </Row>
}
else
{
    if (!IsEditing)
    {
        <Row ItemsPerRow="ItemsPerRow.Three" ColSpan="4">
            <Button Color="Color.None" OnClick="@(() => OpenEdit(null))">
                <Card IsCenter="true" IsShadow="true" class="item">
                    <BodyTemplate>
                        <i class="fa-solid fa-plus 4x content"></i>
                    </BodyTemplate>
                </Card>
            </Button>
            @foreach (var item in TestModels)
            {
                <Button Color="Color.None" OnClick="@(() => OpenEdit(item))">
                    <Card IsCenter="true" IsShadow="true" class="item">
                        <BodyTemplate>
                            <h6>@item.Name</h6>
                            <p>@((MarkupString)item.Intro)</p>
                        </BodyTemplate>
                    </Card>
                </Button>
            }
        </Row>
    }
    else
    {
        <ValidateForm OnValidSubmit="OnTestSubmit" Model="@FormModel">
            <FloatingLabel PlaceHolder="Name" DisplayText="测试名称" @bind-Value="@FormModel.Name" TValue="string"/>
            <Divider/>
            <br/>
            <h4>简介:</h4>
            <Markdown @bind-Html="@FormModel.Intro"/>
            <Divider/>
            <br/>
            <h4>使用语言</h4>
            <Select TValue="string" OnSelectedItemChanged="@(item => { FormModel.Language = item.Value; return Task.CompletedTask; })">
                <Options>
                    <SelectOption Text="CSharp" Value="csharp"/>
                    <SelectOption Text="C" Value="c"/>
                    <SelectOption Text="C++" Value="cpp"/>
                    <SelectOption Text="Python" Value="python"/>
                    <SelectOption Text="Java" Value="java"/>
                </Options>
            </Select>
            <Divider/>
            <br/>
            <h4>代码:</h4>
            <CodeEditor Theme="vs" @bind-Value="@FormModel.Code" Language="@FormModel.Language"/>
            <Divider/>
            <br/>
            <h4>测试代码:</h4>
            <CodeEditor Theme="vs" @bind-Value="@FormModel.TestCode" Language="@FormModel.Language"/>
            <Divider/>
            <br/>
            <Button ButtonType="ButtonType.Submit">完成</Button>
        </ValidateForm>
    }
}

@code {
    [Parameter] public string? Text { get; set; }

    private List<CourseModel> CourseModels { get; set; } = new();
    private List<TestModel> TestModels { get; set; } = new();
    private bool IsEditing { get; set; }
    private DialogTestModel FormModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbFactory.CreateDbContextAsync();
        if (string.IsNullOrEmpty(Text))
        {
            CourseModels = await context.CourseModels.ToListAsync();
        }
        else
        {
            var c = await context.CourseModels.Include(x => x.Tests).FirstOrDefaultAsync(x => x.HashName == Text);
            if (c == null)
            {
                await MessageService.Show(new MessageOption() { Content = "没有内容，正在为您跳回" });
                navigation.NavigateTo("", true);
                return;
            }

            TestModels = c.Tests;
        }
    }

    #region CourseModel

    private Task EditChildren(CourseModel model)
    {
        navigation.NavigateTo($"CourseManage/{model.HashName}", true);
        return Task.CompletedTask;
    }

    private async Task Remove(CourseModel model)
    {
        await using var dbContextAsync = await DbFactory.CreateDbContextAsync();
        dbContextAsync.Remove(model);
        await dbContextAsync.SaveChangesAsync();
    }

    private async Task CourseModelDialog(CourseModel? model)
    {
        var m = new DialogCourseModel();
        if (model != null)
        {
            m.Intro = model.Intro;
            m.Name = model.Name;
            m.HashName = model.HashName;
        }

        var items = Utility.GenerateEditorItems<DialogCourseModel>();

        var option = new EditDialogOption<DialogCourseModel>()
        {
            Title = "课程",
            Model = m,
            Items = items,
            ItemsPerRow = 1,
            RowType = RowType.Inline,
            OnEditAsync = async context =>
            {
                if (context.Model is not DialogCourseModel courseModel) return false;
                if (string.IsNullOrEmpty(courseModel.Intro) || string.IsNullOrEmpty(courseModel.Name)) return false;
                await using var dbContextAsync = await DbFactory.CreateDbContextAsync();
                if (string.IsNullOrEmpty(courseModel.HashName))
                {
                    var c = new CourseModel()
                        { HashName = courseModel.ToString().GetHash(), Name = courseModel.Name, Intro = courseModel.Intro };
                    dbContextAsync.CourseModels.Add(c);
                    CourseModels.Add(c);
                }
                else
                {
                    var result = await dbContextAsync.CourseModels.FirstOrDefaultAsync(x => x.HashName == courseModel.HashName);
                    if (result == null) return true;
                    result.Name = courseModel.Name;
                    result.Intro = courseModel.Intro;
                    model!.Name = courseModel.Name;
                    model.Intro = courseModel.Intro;
                }

                await dbContextAsync.SaveChangesAsync();
                StateHasChanged();
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public class DialogCourseModel
    {
        [AutoGenerateColumn(Ignore = true)] public string HashName { get; set; } = "";

        [Required(ErrorMessage = "{0}不能为空")]
        [AutoGenerateColumn(Order = 10, Filterable = true, Searchable = true)]
        [Display(Name = "课程名称")]
        public string Name { get; set; } = "";

        [Display(Name = "简介")]
        [Required]
        [AutoGenerateColumn(Order = 40, Sortable = true)]
        public string Intro { get; set; } = "";
        public override string ToString()
        {
            return $"Name={Name};Intro={Intro};";
        }
    }

    #endregion

    public class DialogTestModel
    {
        public string HashName { get; set; } = "";
        public string Name { get; set; } = "";
        public string Intro { get; set; } = "";
        public string TestCode { get; set; } = "";
        public string Code { get; set; } = "";
        public string Language { get; set; } = "";
        public override string ToString()
        {
            return $"Name={Name};Intro={Intro};Code={Code};TestCode={TestCode};Language={Language};";
        }
    }

    private void OpenEdit(TestModel? model)
    {
        FormModel = new DialogTestModel();
        if (model != null)
        {
            FormModel.Language = model.Language;
            FormModel.Code = model.Code;
            FormModel.Intro = model.Intro;
            FormModel.TestCode = model.TestCode;
            FormModel.HashName = model.HashName;
            FormModel.Name = model.Name;
        }
        IsEditing = true;
        StateHasChanged();
    }

    private async Task OnTestSubmit(EditContext arg)
    {
        if (string.IsNullOrEmpty(FormModel.Intro) || string.IsNullOrEmpty(FormModel.Name)) return;
        await using var dbContextAsync = await DbFactory.CreateDbContextAsync();
        var course = await dbContextAsync.CourseModels.Include(courseModel => courseModel.Tests).FirstOrDefaultAsync(x => x.HashName == Text);
        if(course == null)return;
        if (string.IsNullOrEmpty(FormModel.HashName))
        {
            var model = new TestModel
            {
                HashName = FormModel.ToString().GetHash(),
                Language = FormModel.Language,
                Code = FormModel.Code,
                Intro = FormModel.Intro,
                TestCode = FormModel.TestCode,
                Name = FormModel.Name
            };
            course.Tests.Add(model);
            TestModels.Add(model);
        }
        else
        {
            var result = course.Tests.FirstOrDefault(x => x.HashName == FormModel.HashName);
            if(result is null)return;
            result.Language = FormModel.Language;
            result.Code = FormModel.Code;
            result.Intro = FormModel.Intro;
            result.TestCode = FormModel.TestCode;
            result.Name = FormModel.Name;
        }

        await dbContextAsync.SaveChangesAsync();
        StateHasChanged();
    }

}